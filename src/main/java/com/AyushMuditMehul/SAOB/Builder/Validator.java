/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.AyushMuditMehul.SAOB.Builder;

import com.AyushMuditMehul.SAOB.Main.MainWindow;
import com.AyushMuditMehul.SAOB.Stats.PerformanceCSVFileManager;
import java.awt.Cursor;
import java.io.File;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import org.semanticweb.HermiT.ReasonerFactory;
import org.semanticweb.owlapi.apibinding.OWLManager;
import org.semanticweb.owlapi.model.OWLAxiom;
import org.semanticweb.owlapi.model.OWLOntology;
import org.semanticweb.owlapi.model.OWLOntologyCreationException;
import org.semanticweb.owlapi.model.OWLOntologyManager;
import org.semanticweb.owlapi.model.OWLOntologyStorageException;
import org.semanticweb.owlapi.model.PrefixManager;
import org.semanticweb.owlapi.reasoner.OWLReasoner;
import org.semanticweb.owlapi.util.DefaultPrefixManager;

/**
 *
 * @author Ayush
 */
public class Validator extends javax.swing.JPanel {

    /**
     * Creates new form Validator
     */
    MainWindow manager;    
    File ontologyFile;
    OWLOntologyManager owlManager;
    OWLOntology ontology;
    PrefixManager prefixManager;
    ReasonerFactory reasonerFactory;
    OWLReasoner reasoner;
    public Validator(ArrayList <OWLAxiom> axiomList,MainWindow m) {
        initComponents();
        manager = m;
        ontologyFile = new File(".\\src\\main\\Resources\\ontology.owl");
        owlManager = OWLManager.createOWLOntologyManager();

        try {
            ontology = owlManager.loadOntologyFromOntologyDocument(ontologyFile);
        } catch (OWLOntologyCreationException ex) {
            Logger.getLogger(Map2RDF.class.getName()).log(Level.SEVERE, null, ex);
        }
        prefixManager = new DefaultPrefixManager(null, null,
                ontology.getOntologyID().getOntologyIRI().get()+"#");
        reasonerFactory = new ReasonerFactory();
        reasoner = reasonerFactory.createReasoner(ontology);
        if (!reasoner.isConsistent()) {
            //error dialog.
            JOptionPane.showMessageDialog(new JFrame(),"Ontology is inconsistent!\nImport new Ontology.", "Can't update Ontology", JOptionPane.ERROR_MESSAGE);
            resultValueLabel.setText("Error");
        } else {
            LoadAxioms(axiomList);//load axiom in tableand add axioms to ontology object
            if (reasoner.isConsistent()) {
                try {
                    ontology.saveOntology();
                    //display success
                    JOptionPane.showMessageDialog(new JFrame(),"New triples added to Ontology.", "Success", JOptionPane.INFORMATION_MESSAGE);
                    resultValueLabel.setText("Success");
                } catch (OWLOntologyStorageException ex) {
                    Logger.getLogger(Validator.class.getName()).log(Level.SEVERE, null, ex);
                    //display error msg
                    JOptionPane.showMessageDialog(new JFrame(),ex.toString(), "Unable to modify Ontology", JOptionPane.ERROR_MESSAGE);
                    resultValueLabel.setText("Error");
                }
            } else {
                //display inconisistency error
                JOptionPane.showMessageDialog(new JFrame(),"Ading these triples will make Ontology inconsistent.", "Can't update Ontology", JOptionPane.ERROR_MESSAGE);
                resultValueLabel.setText("Error");
            }

        }        
    }

    void LoadAxioms(ArrayList<OWLAxiom> list)
    {        
        for(OWLAxiom axiom:list)
        {            
            String [] rowData={axiom.toString(),validateAxiom(axiom)};
            ((DefaultTableModel)axiomTable.getModel()).addRow(rowData);                     
        }
    }
    String validateAxiom(OWLAxiom axiom)
    {

            if(axiom.isAnnotationAxiom())
            {
                if(ontology.containsAxiom(axiom))
                {
                    return "Already Exist";
                }
                else
                {
                    owlManager.addAxiom(ontology, axiom);
                    return "New";
                }
            }
            if(!reasoner.isEntailed(axiom))
            {
                owlManager.addAxiom(ontology, axiom);
                return "New";
            }
            else
            {
                return "Already Exist";
            }                                 
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        axiomTable = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        yesButton = new javax.swing.JButton();
        noButton = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        resultValueLabel = new javax.swing.JLabel();

        axiomTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Triple", "status"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(axiomTable);

        jLabel1.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel1.setText("Want to add more data to ontology?");

        yesButton.setText("Yes");
        yesButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                yesButtonActionPerformed(evt);
            }
        });

        noButton.setText("No");
        noButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                noButtonActionPerformed(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel2.setText("RESULT:");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(144, 144, 144)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addGap(33, 33, 33)
                        .addComponent(yesButton)
                        .addGap(43, 43, 43)
                        .addComponent(noButton))
                    .addComponent(jScrollPane1))
                .addGap(160, 160, 160))
            .addGroup(layout.createSequentialGroup()
                .addGap(522, 522, 522)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(resultValueLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 198, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(534, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(67, 67, 67)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 422, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(resultValueLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(51, 51, 51)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(yesButton)
                    .addComponent(noButton))
                .addGap(30, 30, 30))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void yesButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_yesButtonActionPerformed
        // TODO add your handling code here:
        setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
        manager.showAnalyserScreen();
        manager.deleteMapperScreen();
        manager.deleteValidatorScreen();
        setCursor(Cursor.getDefaultCursor());
    }//GEN-LAST:event_yesButtonActionPerformed

    private void noButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_noButtonActionPerformed
        // TODO add your handling code here:
        PerformanceCSVFileManager performanceFileManager=new PerformanceCSVFileManager();
        performanceFileManager.insertRecord(manager.builderSessionRatings[0], manager.builderSessionRatings[1], manager.builderSessionRatings[2], manager.builderSessionRatings[3], manager.builderSessionRatings[4], manager.builderSessionRatings[5], manager.builderSessionRatings[6]);
        manager.builderSessionRatings=null;
        setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
        manager.showHomeScreen();
        manager.deleteAnalyserScreen();
        manager.deleteMapperScreen();
        manager.deleteValidatorScreen();
        setCursor(Cursor.getDefaultCursor());
    }//GEN-LAST:event_noButtonActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTable axiomTable;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton noButton;
    private javax.swing.JLabel resultValueLabel;
    private javax.swing.JButton yesButton;
    // End of variables declaration//GEN-END:variables
}
