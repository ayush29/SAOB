/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.AyushMuditMehul.SAOB.Builder;

import com.AyushMuditMehul.SAOB.Main.MainWindow;
import edu.stanford.nlp.ie.util.RelationTriple;
import java.awt.Cursor;
import java.io.File;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Set;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import org.semanticweb.owlapi.apibinding.OWLManager;
import org.semanticweb.owlapi.model.IRI;
import org.semanticweb.owlapi.model.OWLAnnotation;
import org.semanticweb.owlapi.model.OWLAnnotationProperty;
import org.semanticweb.owlapi.model.OWLAxiom;
import org.semanticweb.owlapi.model.OWLClass;
import org.semanticweb.owlapi.model.OWLClassExpression;
import org.semanticweb.owlapi.model.OWLDataFactory;
import org.semanticweb.owlapi.model.OWLDataProperty;
import org.semanticweb.owlapi.model.OWLDataPropertyDomainAxiom;
import org.semanticweb.owlapi.model.OWLDataPropertyExpression;
import org.semanticweb.owlapi.model.OWLDataPropertyRangeAxiom;
import org.semanticweb.owlapi.model.OWLDatatype;
import org.semanticweb.owlapi.model.OWLEntity;
import org.semanticweb.owlapi.model.OWLIndividual;
import org.semanticweb.owlapi.model.OWLLiteral;
import org.semanticweb.owlapi.model.OWLNamedIndividual;
import org.semanticweb.owlapi.model.OWLObjectProperty;
import org.semanticweb.owlapi.model.OWLObjectPropertyDomainAxiom;
import org.semanticweb.owlapi.model.OWLObjectPropertyExpression;
import org.semanticweb.owlapi.model.OWLObjectPropertyRangeAxiom;
import org.semanticweb.owlapi.model.OWLOntology;
import org.semanticweb.owlapi.model.OWLOntologyCreationException;
import org.semanticweb.owlapi.model.OWLOntologyManager;
import org.semanticweb.owlapi.model.OWLProperty;
import org.semanticweb.owlapi.model.PrefixManager;
import org.semanticweb.owlapi.search.EntitySearcher;
import org.semanticweb.owlapi.util.DefaultPrefixManager;
import org.semanticweb.owlapi.vocab.OWL2Datatype;

/**
 *
 * @author Ayush
 */
public class Map2RDF extends javax.swing.JPanel {

    /**
     * Creates new form Map2RDF
     * 
     */
    File ontologyFile;
    OWLOntologyManager owlManager;
    OWLOntology ontology;
    PrefixManager prefixManager;
    RelationTriple triple;
    OWLLiteral mappedObjectLiteral;//to save mapped object owlLiteral if property mapped is a data property
    ArrayList<OWLAxiom> owlAxiomList;
    MainWindow manager;
    boolean eventFlag=true;//true=event caused by user, false event caused by program.
    public Map2RDF(RelationTriple triple,MainWindow m) {
        initComponents();
        manager=m;
        this.triple = triple;
        owlAxiomList = null;
        ontologyFile = new File(".\\src\\main\\Resources\\ontology.owl");
        owlManager = OWLManager.createOWLOntologyManager();
        
        try {
            ontology = owlManager.loadOntologyFromOntologyDocument(ontologyFile);
        } catch (OWLOntologyCreationException ex) {
            Logger.getLogger(Map2RDF.class.getName()).log(Level.SEVERE, null, ex);
        }      
        prefixManager= new DefaultPrefixManager(null, null,
            ontology.getOntologyID().getOntologyIRI().get()+"#");
        subjectTextfield.setText(triple.subjectGloss());
        propertyTextfield.setText(triple.relationGloss());
        objectTextfield.setText(triple.objectGloss());
        Mapper();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        ratingRadioButtonGroup = new javax.swing.ButtonGroup();
        jScrollPane1 = new javax.swing.JScrollPane();
        finalTripleTextArea = new javax.swing.JTextArea();
        addToOntologyButton = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        propertyComboBox2 = new javax.swing.JComboBox<>();
        subjectComboBox2 = new javax.swing.JComboBox<>();
        objectComboBox2 = new javax.swing.JComboBox<>();
        subjectComboBox1 = new javax.swing.JComboBox<>();
        objectComboBox1 = new javax.swing.JComboBox<>();
        subjectTextfield = new javax.swing.JTextField();
        propertyTextfield = new javax.swing.JTextField();
        objectTextfield = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        propertyComboBox1 = new javax.swing.JComboBox<>();
        objectMainLabel = new javax.swing.JLabel();
        subjectMainLabel = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        cancelButton = new javax.swing.JButton();
        createTripleButton = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        jLabel7 = new javax.swing.JLabel();
        radioButton5 = new javax.swing.JRadioButton();
        radioButton4 = new javax.swing.JRadioButton();
        radioButton3 = new javax.swing.JRadioButton();
        radioButton2 = new javax.swing.JRadioButton();
        radioButton1 = new javax.swing.JRadioButton();
        radioButton0 = new javax.swing.JRadioButton();

        finalTripleTextArea.setColumns(20);
        finalTripleTextArea.setRows(5);
        jScrollPane1.setViewportView(finalTripleTextArea);

        addToOntologyButton.setText("Add to Ontology");
        addToOntologyButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addToOntologyButtonActionPerformed(evt);
            }
        });

        propertyComboBox2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                propertyComboBox2ActionPerformed(evt);
            }
        });

        subjectComboBox2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                subjectComboBox2ActionPerformed(evt);
            }
        });

        subjectComboBox1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                subjectComboBox1ActionPerformed(evt);
            }
        });

        objectComboBox1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                objectComboBox1ActionPerformed(evt);
            }
        });

        subjectTextfield.setEditable(false);

        propertyTextfield.setEditable(false);

        objectTextfield.setEditable(false);
        objectTextfield.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                objectTextfieldActionPerformed(evt);
            }
        });

        jLabel1.setText("Subject");

        jLabel2.setText("Property");

        jLabel3.setText("Object");

        propertyComboBox1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                propertyComboBox1ActionPerformed(evt);
            }
        });

        objectMainLabel.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        subjectMainLabel.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        jLabel6.setText("Choose Appropriate OWL Property:");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(102, 102, 102)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(subjectComboBox2, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(subjectMainLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(subjectComboBox1, 0, 192, Short.MAX_VALUE))
                .addGap(193, 193, 193)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel6)
                    .addComponent(propertyComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, 208, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(propertyComboBox2, javax.swing.GroupLayout.PREFERRED_SIZE, 208, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(objectComboBox2, 0, 200, Short.MAX_VALUE)
                    .addComponent(objectComboBox1, javax.swing.GroupLayout.Alignment.TRAILING, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(objectMainLabel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(110, 110, 110))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(50, 50, 50)
                .addComponent(subjectTextfield, javax.swing.GroupLayout.PREFERRED_SIZE, 303, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(105, 105, 105)
                .addComponent(propertyTextfield, javax.swing.GroupLayout.PREFERRED_SIZE, 287, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 109, Short.MAX_VALUE)
                .addComponent(objectTextfield, javax.swing.GroupLayout.PREFERRED_SIZE, 306, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(53, 53, 53))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(168, 168, 168)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel2)
                .addGap(362, 362, 362)
                .addComponent(jLabel3)
                .addGap(197, 197, 197))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(12, 12, 12)
                        .addComponent(jLabel1))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel2)
                            .addComponent(jLabel3))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(subjectTextfield, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(propertyTextfield, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(objectTextfield, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(objectMainLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(subjectMainLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel6))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(objectComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(subjectComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(propertyComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(objectComboBox2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(subjectComboBox2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(propertyComboBox2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(53, Short.MAX_VALUE))
        );

        jLabel4.setText("Final RDF Triple(s)");

        jLabel5.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel5.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel5.setText("Map2RDF");

        cancelButton.setText("Cancel");
        cancelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelButtonActionPerformed(evt);
            }
        });

        createTripleButton.setText("Create Triple(s)");
        createTripleButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                createTripleButtonActionPerformed(evt);
            }
        });

        jPanel2.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        jLabel7.setText("Give Ratings for system suggestions:");

        ratingRadioButtonGroup.add(radioButton5);
        radioButton5.setText("5");

        ratingRadioButtonGroup.add(radioButton4);
        radioButton4.setText("4");

        ratingRadioButtonGroup.add(radioButton3);
        radioButton3.setText("3");

        ratingRadioButtonGroup.add(radioButton2);
        radioButton2.setText("2");

        ratingRadioButtonGroup.add(radioButton1);
        radioButton1.setText("1");

        ratingRadioButtonGroup.add(radioButton0);
        radioButton0.setText("0");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(41, 41, 41)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(radioButton5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(radioButton4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(radioButton3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(radioButton2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(radioButton1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(radioButton0, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(331, 331, 331))
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel7, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(205, 205, 205))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel7, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(radioButton5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(radioButton4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(radioButton3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(radioButton2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(radioButton1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(radioButton0, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(11, 11, 11))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(174, 174, 174)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel4)
                    .addComponent(createTripleButton, javax.swing.GroupLayout.PREFERRED_SIZE, 124, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 764, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 53, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(addToOntologyButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(cancelButton))
                    .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, 234, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(172, 172, 172))
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(622, 622, 622)
                        .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 112, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(85, 85, 85)
                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(createTripleButton, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(29, 29, 29)
                        .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane1))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 31, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(addToOntologyButton)
                            .addComponent(cancelButton))))
                .addGap(91, 91, 91))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void objectTextfieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_objectTextfieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_objectTextfieldActionPerformed

    private void subjectComboBox1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_subjectComboBox1ActionPerformed
        // TODO add your handling code here:        
       if(eventFlag)
       {
           loadSubjectComboBox2();
       }
    }//GEN-LAST:event_subjectComboBox1ActionPerformed

    private void propertyComboBox1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_propertyComboBox1ActionPerformed
        // TODO add your handling code here:
        if(eventFlag)
        {
            if(propertyComboBox1.getSelectedIndex()>0)
            {
                loadPropertyComboBox2();
            }
            else
            {
                eventFlag=false;
                propertyComboBox2.removeAllItems();
                subjectMainLabel.setText("");
                objectMainLabel.setText("");
                subjectComboBox1.removeAllItems();
                subjectComboBox2.removeAllItems();
                objectComboBox1.removeAllItems();
                objectComboBox2.removeAllItems();
                eventFlag=true;
            }
        }
    }//GEN-LAST:event_propertyComboBox1ActionPerformed

    private void propertyComboBox2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_propertyComboBox2ActionPerformed
        // TODO add your handling code here:
        if(eventFlag)
        {
            if(propertyComboBox2.getSelectedIndex()>0)
            {
                OWLProperty property;

                IRI domainIRI = null;
                if (propertyComboBox1.getSelectedItem().toString().contains("Object Property")) {
                    property = owlManager.getOWLDataFactory().getOWLObjectProperty(":" + propertyComboBox2.getSelectedItem().toString(), prefixManager);
                    IRI rangeIRI;//get it from property
                    OWLObjectPropertyDomainAxiom domainAxiom = (OWLObjectPropertyDomainAxiom) ontology.getObjectPropertyDomainAxioms((OWLObjectProperty) property).toArray()[0];//currently assuming only one class as domain of any property
                    OWLObjectPropertyRangeAxiom rangeAxiom = (OWLObjectPropertyRangeAxiom) ontology.getObjectPropertyRangeAxioms((OWLObjectProperty) property).toArray()[0];//currently assuming only one class as range of any property
                    domainIRI = domainAxiom.getDomain().asOWLClass().getIRI();
                    rangeIRI = rangeAxiom.getRange().asOWLClass().getIRI();
                    OWLNamedIndividual objectResource = individualMapper(triple.objectGloss(), rangeIRI);
                    //set object main label and load and set combo boxes
                    objectMainLabel.setText("class:" + rangeIRI.getShortForm());
                    loadObjectComboBox1();
                    if (objectResource != null)//i.e. mapped to some existing resource
                    {
                        setObjectComboBox1("Existing Resource");
                        loadObjectComboBox2();
                        setObjectComboBox2(objectResource.getIRI().getShortForm());
                    } else {
                        setObjectComboBox1("New Resource");
                    }
                } else if (propertyComboBox1.getSelectedItem().toString().contains("Data Property")) {
                    property = owlManager.getOWLDataFactory().getOWLDataProperty(":" + propertyComboBox2.getSelectedItem().toString(), prefixManager);
                    OWLDataPropertyDomainAxiom domainAxiom = (OWLDataPropertyDomainAxiom) ontology.getDataPropertyDomainAxioms((OWLDataProperty) property).toArray()[0];//currently assuming only one class as domain of any property
                    OWLDataPropertyRangeAxiom rangeAxiom = (OWLDataPropertyRangeAxiom) ontology.getDataPropertyRangeAxioms((OWLDataProperty) property).toArray()[0];//currently assuming only one class as range of any property
                    domainIRI = domainAxiom.getDomain().asOWLClass().getIRI();
                    OWLDatatype rangeDataType = rangeAxiom.getRange().asOWLDatatype();
                    //set object main label 
                    objectMainLabel.setText("Literal:" + rangeDataType.getIRI().getShortForm());
                    mappedObjectLiteral =owlManager.getOWLDataFactory().getOWLLiteral(triple.objectGloss(), OWL2Datatype.getDatatype(rangeDataType.getIRI()));
                }
                OWLNamedIndividual subjectResource = individualMapper(triple.subjectGloss(), domainIRI);
                subjectMainLabel.setText("class:" + domainIRI.getShortForm());
                loadSubjectComboBox1();
                if (subjectResource != null)//i.e. mapped to some existing resource
                {
                    setSubjectComboBox1("Existing Resource");
                    loadSubjectComboBox2();
                    setSubjectComboBox2(subjectResource.getIRI().getShortForm());
                } else {
                    setSubjectComboBox1("New Resource");
                }
            }
            else
            {
                eventFlag=false;
                subjectMainLabel.setText("");
                subjectComboBox1.removeAllItems();
                subjectComboBox2.removeAllItems();
                objectMainLabel.setText("");
                objectComboBox1.removeAllItems();
                objectComboBox2.removeAllItems();
                eventFlag=true;
            }
        }
    }//GEN-LAST:event_propertyComboBox2ActionPerformed

    private void objectComboBox1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_objectComboBox1ActionPerformed
        // TODO add your handling code here:
       if(eventFlag)
       {
           loadObjectComboBox2();
       }
    }//GEN-LAST:event_objectComboBox1ActionPerformed

    private void subjectComboBox2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_subjectComboBox2ActionPerformed
        // TODO add your handling code here:
        if(eventFlag)
        {
            
        }
    }//GEN-LAST:event_subjectComboBox2ActionPerformed

    private void createTripleButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_createTripleButtonActionPerformed
        // TODO add your handling code here:
        owlAxiomList=new ArrayList<OWLAxiom>();
        finalTripleTextArea.setText("");
        //Subject related
        OWLNamedIndividual subjectIndividual = null;
        OWLDataFactory df=owlManager.getOWLDataFactory();
        //String tripleString;//using it again and again to display triple in textarea
        if(subjectComboBox1.getSelectedItem().toString().contains("Existing Resource")&&subjectComboBox2.getSelectedIndex()>0)
        {
         String selectedIndividual=subjectComboBox2.getSelectedItem().toString();
         subjectIndividual= owlManager.getOWLDataFactory().getOWLNamedIndividual(":"+selectedIndividual.substring(0,selectedIndividual.indexOf("(") ), prefixManager);
         OWLAnnotationProperty labelProperty = df.getRDFSLabel();
         OWLLiteral label=df.getOWLLiteral(triple.subjectGloss());
         OWLAxiom labelAxiom = df.getOWLAnnotationAssertionAxiom(labelProperty,subjectIndividual.getIRI() , label);
         owlAxiomList.add(labelAxiom);
         //tripleString=subjectIndividual.getIRI().getShortForm()+" "+labelProperty.getIRI().getShortForm()+" "+triple.subjectGloss()+"\n";
         //finalTripleTextArea.append(tripleString);         
         finalTripleTextArea.append(labelAxiom.toString()+"\n");
        }
        else if(subjectComboBox1.getSelectedItem().toString().contains("New Resource"))
        {                  
            OWLAnnotationProperty labelProperty = df.getRDFSLabel();
            String className = subjectMainLabel.getText();
            className = className.substring(className.indexOf(":")+1);
            OWLClass owlClass = df.getOWLClass(":" + className, prefixManager); //pass class iri in this
            String individualName = triple.subjectGloss();
            OWLLiteral label = df.getOWLLiteral(individualName);//label contains original name
            individualName = individualName.replace(' ', '_');//replacing space with _ 
            subjectIndividual = df.getOWLNamedIndividual(":" + individualName, prefixManager);
            OWLAxiom typeOfAxiom = df.getOWLClassAssertionAxiom(owlClass, subjectIndividual);
            OWLAxiom labelAxiom = df.getOWLAnnotationAssertionAxiom(labelProperty, subjectIndividual.getIRI(), label);
            owlAxiomList.add(typeOfAxiom);
            owlAxiomList.add(labelAxiom);
            //tripleString = individualName + " " + "type " + className + "\n" + individualName + " " + labelProperty.getIRI().getShortForm() + " " + triple.subjectGloss() + "\n";
            //finalTripleTextArea.append(tripleString);
            finalTripleTextArea.append(typeOfAxiom.toString()+"\n");
            finalTripleTextArea.append(labelAxiom.toString()+"\n");//for testing
        }
        else
        {
            //error display mapping incomplete
            JOptionPane.showMessageDialog(new JFrame(),"Subject Mapping Incomplete!", "Incomplete Mapping", JOptionPane.ERROR_MESSAGE);
            finalTripleTextArea.setText("");
            owlAxiomList=null;
            return;
        }
        
        //property related
        if(propertyComboBox1.getSelectedItem().toString().contains("Object Property")&&propertyComboBox2.getSelectedIndex()>0)
        {
         
            OWLNamedIndividual objectIndividual = null;
            if (objectComboBox1.getSelectedItem().toString().contains("Existing Resource") && objectComboBox2.getSelectedIndex() > 0) {
                String selectedIndividual = objectComboBox2.getSelectedItem().toString();
                objectIndividual = owlManager.getOWLDataFactory().getOWLNamedIndividual(":" + selectedIndividual.substring(0, selectedIndividual.indexOf("(")), prefixManager);
                OWLAnnotationProperty labelProperty = df.getRDFSLabel();
                OWLLiteral label = df.getOWLLiteral(triple.objectGloss());
                OWLAxiom labelAxiom = df.getOWLAnnotationAssertionAxiom(labelProperty, objectIndividual.getIRI(), label);
                owlAxiomList.add(labelAxiom);
                //tripleString = objectIndividual.getIRI().getShortForm() + " " + labelProperty.getIRI().getShortForm() + " " + triple.objectGloss() + "\n";
                //finalTripleTextArea.append(tripleString);
                finalTripleTextArea.append(labelAxiom.toString()+"\n");
            } else if (objectComboBox1.getSelectedItem().toString().contains("New Resource")) {
                OWLAnnotationProperty labelProperty = df.getRDFSLabel();
                String className = objectMainLabel.getText();
                className = className.substring(className.indexOf(":") + 1);
                OWLClass owlClass = df.getOWLClass(":" + className, prefixManager); //pass class iri in this
                String individualName = triple.objectGloss();
                OWLLiteral label = df.getOWLLiteral(individualName);//label contains original name
                individualName = individualName.replace(' ', '_');//replacing space with _ 
                objectIndividual = df.getOWLNamedIndividual(":" + individualName, prefixManager);
                OWLAxiom typeOfAxiom = df.getOWLClassAssertionAxiom(owlClass, objectIndividual);
                OWLAxiom labelAxiom = df.getOWLAnnotationAssertionAxiom(labelProperty, objectIndividual.getIRI(), label);
                owlAxiomList.add(typeOfAxiom);
                owlAxiomList.add(labelAxiom);
                //tripleString = individualName + " " + "type " + className + "\n" + individualName + " " + labelProperty.getIRI().getShortForm() + " " + triple.objectGloss() + "\n";
                //finalTripleTextArea.append(tripleString);
                finalTripleTextArea.append(typeOfAxiom.toString()+"\n");
                finalTripleTextArea.append(labelAxiom.toString()+"\n");
            } else {
                //error display mapping incomplete
                JOptionPane.showMessageDialog(new JFrame(), "Object Mapping Incomplete!", "Incomplete Mapping", JOptionPane.ERROR_MESSAGE);
                finalTripleTextArea.setText("");
                owlAxiomList = null;
                return;
            }
            OWLObjectProperty property= df.getOWLObjectProperty(":"+propertyComboBox2.getSelectedItem().toString(), prefixManager);
            //inserting property mapping rule in rule file
            PredicateRulesManager prm=new PredicateRulesManager();
            prm.ruleInsertion(propertyTextfield.getText(), property.getIRI().toString());
            OWLAxiom objectPropertyAxiom =  df.getOWLObjectPropertyAssertionAxiom((OWLObjectPropertyExpression)property, subjectIndividual, objectIndividual);
            owlAxiomList.add(objectPropertyAxiom);
            //tripleString=subjectIndividual.getIRI().getShortForm()+" "+property.getIRI().getShortForm()+" "+objectIndividual.getIRI().getShortForm()+"\n";
            //finalTripleTextArea.append(tripleString);
            finalTripleTextArea.append(objectPropertyAxiom.toString()+"\n");
        }
        else if(propertyComboBox1.getSelectedItem().toString().contains("Data Property")&&propertyComboBox2.getSelectedIndex()>0)
        {
            OWLDataProperty property= df.getOWLDataProperty(":"+propertyComboBox2.getSelectedItem().toString(), prefixManager);
            //inserting property mapping rule in rule file
            PredicateRulesManager prm=new PredicateRulesManager();
            prm.ruleInsertion(propertyTextfield.getText(), property.getIRI().toString());
            OWLAxiom dataPropertyAxiom =  df.getOWLDataPropertyAssertionAxiom((OWLDataPropertyExpression)property, subjectIndividual,mappedObjectLiteral);
            owlAxiomList.add(dataPropertyAxiom);
            //tripleString=subjectIndividual.getIRI().getShortForm()+" "+property.getIRI().getShortForm()+" "+mappedObjectLiteral.getLiteral();
            //finalTripleTextArea.append(tripleString);
            finalTripleTextArea.append(dataPropertyAxiom.toString()+"\n");
        }
        else
        {
            //error display mapping incomplete
            JOptionPane.showMessageDialog(new JFrame(),"Property Mapping Incomplete!", "Incomplete Mapping", JOptionPane.ERROR_MESSAGE);
            finalTripleTextArea.setText("");
            owlAxiomList=null;
            return;
        }
    }//GEN-LAST:event_createTripleButtonActionPerformed

    private void cancelButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelButtonActionPerformed
        // TODO add your handling code here:
        manager.showAnalyserScreen();
        manager.deleteMapperScreen();
    }//GEN-LAST:event_cancelButtonActionPerformed

    private void addToOntologyButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addToOntologyButtonActionPerformed
        // TODO add your handling code here:
        manager.builderSessionRatings[0]++;
        if(radioButton0.isSelected())
        {
            manager.builderSessionRatings[1]++;
        }
        else if(radioButton1.isSelected())
        {
            manager.builderSessionRatings[2]++;
        }
        else if(radioButton2.isSelected())
        {
            manager.builderSessionRatings[3]++;
        }
        else if(radioButton3.isSelected())
        {
            manager.builderSessionRatings[4]++;
        }
        else if(radioButton4.isSelected())
        {
            manager.builderSessionRatings[5]++;
        }
        else if(radioButton5.isSelected())
        {
            manager.builderSessionRatings[6]++;
        }        
        setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
        manager.createValidatorScreen(owlAxiomList);
        manager.showValidatorScreen();        
        setCursor(Cursor.getDefaultCursor());
    }//GEN-LAST:event_addToOntologyButtonActionPerformed

    void loadSubjectComboBox1()
    {
        eventFlag=false;
        subjectComboBox1.removeAllItems();        
        if(!subjectMainLabel.getText().isEmpty())
        {
            subjectComboBox1.addItem("Choose Resource Type");
            subjectComboBox1.addItem("New Resource");
            subjectComboBox1.addItem("Existing Resource");
        }
        eventFlag=true;
    }
    void setSubjectComboBox1(String str)
    {
        eventFlag=false;
        int n=subjectComboBox1.getItemCount();
                for(int i=1;i<n;i++)
                {
                    if(subjectComboBox1.getItemAt(i).contains(str))
                    {                        
                        subjectComboBox1.setSelectedIndex(i);                        
                    }
                }
        eventFlag=true;
    }
    void loadSubjectComboBox2()
    {
        eventFlag=false;
        subjectComboBox2.removeAllItems();
        if(subjectComboBox1.getSelectedItem().toString().contains("Existing Resource"))
        {          
          //load all individuals in this combobox
            subjectComboBox2.addItem("Select Resource");
            Set<OWLNamedIndividual> list=ontology.getIndividualsInSignature();
            for(OWLNamedIndividual i:list)
            {
               Collection<OWLClassExpression> classList=EntitySearcher.getTypes(i, ontology);
               String classes="";
               for(OWLClassExpression exp:classList)
               {
                   classes+=exp.asOWLClass().getIRI().getShortForm()+";";
               }
                subjectComboBox2.addItem(i.getIRI().getShortForm()+"(class:"+classes+")");
            }
        }        
        eventFlag=true;
    }
    void setSubjectComboBox2(String str)
    {
        eventFlag=false;
        int n=subjectComboBox2.getItemCount();
                for(int i=1;i<n;i++)
                {
                    if(subjectComboBox2.getItemAt(i).contains(str))
                    {                        
                        subjectComboBox2.setSelectedIndex(i);                        
                    }
                }
        eventFlag=true;                
    }
    void loadPropertyComboBox1()
    {
        eventFlag=false;
        propertyComboBox1.removeAllItems();
        propertyComboBox1.addItem("Choose Property Type");
        propertyComboBox1.addItem("Object Property");
        propertyComboBox1.addItem("Data Property");
        eventFlag=true;
    }
    void setPropertyComboBox1(String str)
    {
        eventFlag=false;
        int n=propertyComboBox1.getItemCount();
                for(int i=1;i<n;i++)
                {
                    if(propertyComboBox1.getItemAt(i).contains(str))
                    {                        
                        propertyComboBox1.setSelectedIndex(i);                        
                    }
                }
        eventFlag=false;
    }
    void loadPropertyComboBox2()
    {
        eventFlag=false;
        propertyComboBox2.removeAllItems();
        if(propertyComboBox1.getSelectedItem().toString().contains("Object Property"))
        {
            propertyComboBox2.addItem("Select Property");
            Set<OWLObjectProperty> objectprop = ontology.getObjectPropertiesInSignature();
            for(OWLObjectProperty op : objectprop)
            {
               propertyComboBox2.addItem(op.getIRI().getShortForm());
            }
            
        }
        else if(propertyComboBox1.getSelectedItem().toString().contains("Data Property"))
        {
            propertyComboBox2.addItem("Select Property");
            Set<OWLDataProperty> dataprop = ontology.getDataPropertiesInSignature();
            for(OWLDataProperty dp : dataprop)
            {
                propertyComboBox2.addItem(dp.getIRI().getShortForm());
            }
        }
        eventFlag=true;
    }
    void setPropertyComboBox2(String str)
    {
        eventFlag=false;
        int n=propertyComboBox2.getItemCount();
                for(int i=1;i<n;i++)
                {
                    if(propertyComboBox2.getItemAt(i).contains(str))
                    {                        
                        propertyComboBox2.setSelectedIndex(i);                        
                    }
                }
        eventFlag=true;                
    }
    void loadObjectComboBox1()
    {
        eventFlag=false;
        objectComboBox1.removeAllItems();
        if(objectMainLabel.getText().contains("class"))
        {
            objectComboBox1.addItem("Choose Resource Type");
            objectComboBox1.addItem("New Resource");
            objectComboBox1.addItem("Existing Resource");
        }        
        eventFlag=true;
    }
    void setObjectComboBox1(String str)
    {
        eventFlag=false;
        int n=propertyComboBox1.getItemCount();
                for(int i=1;i<n;i++)
                {
                    if(objectComboBox1.getItemAt(i).contains(str))
                    {                        
                        objectComboBox1.setSelectedIndex(i);                        
                    }
                }
        eventFlag=true;
    }
    void loadObjectComboBox2()
    {
        eventFlag=false;
        objectComboBox2.removeAllItems();
        if(objectComboBox1.getSelectedItem().toString().contains("Existing Resource"))
        {
            objectComboBox2.addItem("Select Resource");
            //load all individuals
            Set<OWLNamedIndividual> list=ontology.getIndividualsInSignature();
            for(OWLNamedIndividual i:list)
            {
                Collection<OWLClassExpression> classList=EntitySearcher.getTypes(i, ontology);
               String classes="";
               for(OWLClassExpression exp:classList)
               {
                   classes+=exp.asOWLClass().getIRI().getShortForm()+";";
               }
                objectComboBox2.addItem(i.getIRI().getShortForm()+"(class:"+classes+")");                
            }
        }
        eventFlag=true;
    }
    void setObjectComboBox2(String str)
    {
        eventFlag=false;
        int n=objectComboBox2.getItemCount();
                for(int i=1;i<n;i++)
                {
                    if(objectComboBox2.getItemAt(i).contains(str))
                    {                        
                        objectComboBox2.setSelectedIndex(i);                        
                    }
                }
        eventFlag=true;        
    }
    
    void Mapper()
    {        
        OWLProperty property=propertyMapper(triple.relationGloss());        
        if(property!=null)
        {            
            loadPropertyComboBox1();  
            IRI domainIRI;//get it from OWL property 
            
            if(property.isOWLDataProperty())
            {                              
                setPropertyComboBox1("Data Property");   
                OWLDataPropertyDomainAxiom domainAxiom= (OWLDataPropertyDomainAxiom) ontology.getDataPropertyDomainAxioms((OWLDataProperty) property).toArray()[0];//currently assuming only one class as domain of any property
                OWLDataPropertyRangeAxiom rangeAxiom= (OWLDataPropertyRangeAxiom) ontology.getDataPropertyRangeAxioms((OWLDataProperty) property).toArray()[0];//currently assuming only one class as range of any property
                domainIRI=domainAxiom.getDomain().asOWLClass().getIRI();
                OWLDatatype rangeDataType=rangeAxiom.getRange().asOWLDatatype();               
                //set object main label 
                objectMainLabel.setText("Literal:"+rangeDataType.getIRI().getShortForm());
                mappedObjectLiteral =  owlManager.getOWLDataFactory().getOWLLiteral(triple.objectGloss(), OWL2Datatype.getDatatype(rangeDataType.getIRI()));
            }
            else//otherwise it is object property
            {
                setPropertyComboBox1("Object Property");
                IRI rangeIRI;//get it from property
                OWLObjectPropertyDomainAxiom domainAxiom= (OWLObjectPropertyDomainAxiom) ontology.getObjectPropertyDomainAxioms((OWLObjectProperty) property).toArray()[0];//currently assuming only one class as domain of any property
                OWLObjectPropertyRangeAxiom rangeAxiom= (OWLObjectPropertyRangeAxiom) ontology.getObjectPropertyRangeAxioms((OWLObjectProperty) property).toArray()[0];//currently assuming only one class as range of any property
                domainIRI=domainAxiom.getDomain().asOWLClass().getIRI();
                rangeIRI=rangeAxiom.getRange().asOWLClass().getIRI();
                OWLNamedIndividual objectResource=individualMapper(triple.objectGloss(),rangeIRI);
                //set object main label and load and set combo boxes
                objectMainLabel.setText("class:"+rangeIRI.getShortForm());
                loadObjectComboBox1();
                if (objectResource != null)//i.e. mapped to some existing resource
                {
                    setObjectComboBox1("Existing Resource");
                    loadObjectComboBox2();
                    setObjectComboBox2(objectResource.getIRI().getShortForm());
                } else {
                    setObjectComboBox1("New Resource");
                }
                
            }
            OWLNamedIndividual subjectResource=individualMapper(triple.subjectGloss(),domainIRI);
            subjectMainLabel.setText("class:"+domainIRI.getShortForm());
            loadSubjectComboBox1();
            if(subjectResource!=null)//i.e. mapped to some existing resource
            {
                setSubjectComboBox1("Existing Resource");
                loadSubjectComboBox2();
                setSubjectComboBox2(subjectResource.getIRI().getShortForm());
            }
            else
            {
                setSubjectComboBox1("New Resource");
            }
            loadPropertyComboBox2();
            setPropertyComboBox2(property.getIRI().getShortForm());
                                    
        }
        else
        {
            loadPropertyComboBox1();
        }
        
    }
    
    OWLProperty propertyMapper(String propertyText)
    {
        PredicateRulesManager prm= new PredicateRulesManager();        
        String propertyIRI=prm.ruleSearch(propertyText);
        if(propertyIRI==null||propertyIRI.isEmpty())
        {            
            return null;
        }
        else
        {
            OWLDataProperty dataProperty;
            OWLObjectProperty objectProperty;
            if(ontology.containsDataPropertyInSignature(IRI.create(propertyIRI))) //this function returns boolean
            {   dataProperty = owlManager.getOWLDataFactory().getOWLDataProperty(IRI.create(propertyIRI));                
                return dataProperty;
            }
            else if(ontology.containsObjectPropertyInSignature(IRI.create(propertyIRI)))
            {  objectProperty = owlManager.getOWLDataFactory().getOWLObjectProperty(IRI.create(propertyIRI));                
                return objectProperty;
            }
            else
                return null;        
        }
          
    }
    OWLNamedIndividual individualMapper(String text,IRI classIRI)
    {        
         //currently not using classIRI, possible optimisation: there are higher chances that text represents an individual of class represented by class IRI
        Collection<OWLAnnotation> labelList;          
        String label;
         OWLAnnotationProperty labelProperty = owlManager.getOWLDataFactory().getRDFSLabel();            
            Set<OWLNamedIndividual> individual = ontology.getIndividualsInSignature();
            for(OWLNamedIndividual i : individual)
            {                   
                labelList=EntitySearcher.getAnnotations((OWLEntity)i, ontology, labelProperty);
                for(OWLAnnotation x : labelList)
                {                                 
                    label=x.toString();
                    label=label.substring(label.indexOf('"')+1, label.lastIndexOf('"'));                        
                    if(text.equalsIgnoreCase(label))
                    {                                                
                        return i;
                    }
                }
            }
        return null;
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addToOntologyButton;
    private javax.swing.JButton cancelButton;
    private javax.swing.JButton createTripleButton;
    private javax.swing.JTextArea finalTripleTextArea;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JComboBox<String> objectComboBox1;
    private javax.swing.JComboBox<String> objectComboBox2;
    private javax.swing.JLabel objectMainLabel;
    private javax.swing.JTextField objectTextfield;
    private javax.swing.JComboBox<String> propertyComboBox1;
    private javax.swing.JComboBox<String> propertyComboBox2;
    private javax.swing.JTextField propertyTextfield;
    private javax.swing.JRadioButton radioButton0;
    private javax.swing.JRadioButton radioButton1;
    private javax.swing.JRadioButton radioButton2;
    private javax.swing.JRadioButton radioButton3;
    private javax.swing.JRadioButton radioButton4;
    private javax.swing.JRadioButton radioButton5;
    private javax.swing.ButtonGroup ratingRadioButtonGroup;
    private javax.swing.JComboBox<String> subjectComboBox1;
    private javax.swing.JComboBox<String> subjectComboBox2;
    private javax.swing.JLabel subjectMainLabel;
    private javax.swing.JTextField subjectTextfield;
    // End of variables declaration//GEN-END:variables
}
